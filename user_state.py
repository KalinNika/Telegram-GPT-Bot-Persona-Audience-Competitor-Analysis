def get_questions(mode):
    if mode == 'unpacking':
        return [
            "1. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            "2. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
            "3. –ì–¥–µ —Ç—ã –∂–∏–≤—ë—à—å –∏–ª–∏ –æ—Ç–∫—É–¥–∞ —Ç—ã?",
            "4. –ß–µ–º —Ç—ã —Å–µ–π—á–∞—Å –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? (–ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –ø—Ä–æ–µ–∫—Ç, —Å—Ç–∞—Ç—É—Å)",
            "5. –ß—Ç–æ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è? (—Ç–µ–º—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ñ–æ—Ä–º–∞—Ç—ã)",
            "6. –ö–∞–∫–∏–µ 3 —Å–ª–æ–≤–∞ —Ç–µ–±—è –æ–ø–∏—Å—ã–≤–∞—é—Ç?",
            "7. –í —á—ë–º —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–∏–ª—å–Ω–æ–π/—Å–∏–ª—å–Ω—ã–º?",
            "8. –ó–∞ –∫–∞–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Ç—ã —Å–ª–µ–¥–∏—à—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º?",
            "9. –ó–∞—á–µ–º —Ç–µ–±–µ –±–ª–æ–≥? (–¥–µ–Ω—å–≥–∏, —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, —Ç–µ—Ä–∞–ø–∏—è, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö)",
            "10. –ß—Ç–æ –±—ã —Ç—ã –ø–æ–∫–∞–∑–∞–ª–∞(-–µ–ª) –ª—é–¥—è–º, –µ—Å–ª–∏ –±—ã –Ω–µ –±–æ—è–ª–∞—Å—å(-—Å—è)?",
            "11. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤–∞–∂–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å?",
            "12. –ö–∞–∫–∏–µ —Å–æ—Ü—Å–µ—Ç–∏ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ?",
            "13. –ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å?",
            "14. –ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ —Ç–µ–±—è —Ç–æ—Ä–º–æ–∑—è—Ç?",
            "15. –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª–∏?"
        ]
    elif mode == 'audience':
        return [
            "1. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø—Ä–æ–µ–∫—Ç? (–±–ª–æ–≥, –ø—Ä–æ–¥—É–∫—Ç, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å)",
            "2. –ó–∞—á–µ–º —Ç–µ–±–µ –∞–Ω–∞–ª–∏–∑ –¶–ê? (–ø—Ä–æ–¥–∞–∂–∏, –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ, —É–ø–∞–∫–æ–≤–∫–∞ –∏ —Ç.–¥.)",
            "3. –û–ø–∏—à–∏ —Å–≤–æ—é –∞—É–¥–∏—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ)",
            "4. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π –±–ª–æ–≥/–∫–∞–Ω–∞–ª",
            "5. 5‚Äì10 —Ö—ç—à—Ç–µ–≥–æ–≤ –∏–ª–∏ —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å",
            "6. 1‚Äì2 —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
            "7. –ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã —è —Å —Ç–æ–±–æ–π –æ–±—â–∞–ª—Å—è? (1 ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–Ω–æ, 2 ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, 3 ‚Äî –∫–∞–∫ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ)"
        ]
    elif mode == 'competitors':
        return [
            "1. –ö–∞–∫–æ–π —É —Ç–µ–±—è –ø—Ä–æ–µ–∫—Ç? (–±–ª–æ–≥, –ø—Ä–æ–¥—É–∫—Ç, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å)",
            "2. –ö—Ç–æ —Ç–≤–æ—è –¶–ê?",
            "3. –ö—Ç–æ —Ç–≤–æ–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∏–ª–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã? –í—Å—Ç–∞–≤—å –¥–æ 5 —Å—Å—ã–ª–æ–∫",
            "4. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—á–µ—à—å —Ä–µ—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞? (–≤—ã–¥–µ–ª–∏—Ç—å—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å, —É—Å–∏–ª–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏ —Ç.–¥.)",
            "5. –ö–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω—É–∂–µ–Ω? (1 ‚Äî –±—ã—Å—Ç—Ä—ã–π, 2 ‚Äî –≥–ª—É–±–æ–∫–∏–π, 3 ‚Äî —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é, 4 ‚Äî —á–∞—Å—Ç–∏—á–Ω–æ)"
        ]
    else:
        return []

def save_answer(user_data, answer):
    user_data['answers'].append(answer)
    user_data['q_index'] += 1

def get_full_prompt(user_data):
    file_map = {
        'unpacking': 'prompts/unpacking.txt',
        'audience': 'prompts/audience.txt',
        'competitors': 'prompts/competitors.txt'
    }
    prompt_path = file_map.get(user_data['mode'])
    with open(prompt_path, encoding='utf-8') as f:
        base_prompt = f.read()

    answers = "\n".join(user_data['answers'])
    link_data = user_data.get("link_data", [])

    if link_data:
        links_summary = "\n\n".join(link_data)
        return f"{base_prompt}\n\n–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{answers}\n\nüîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º:\n{links_summary}"
    else:
        return f"{base_prompt}\n\n–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{answers}"
