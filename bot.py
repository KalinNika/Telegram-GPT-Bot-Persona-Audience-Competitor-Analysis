from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
import json
from user_state import get_questions, save_answer, get_full_prompt
from gpt_api import generate_response
from link_parser import parse_links_in_text  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ

with open("config.json") as f:
    config = json.load(f)

ALLOWED_USERS = config["ALLOWED_USERS"]
SELECT, QUESTION, NEXT = range(3)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ALLOWED_USERS:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–ª—É–±–∞.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –ª–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¶–ê –∏–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º üëá",
        reply_markup=ReplyKeyboardMarkup(
            [["–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏", "–ê–Ω–∞–ª–∏–∑ –¶–ê", "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    return SELECT

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÅ –í—Å—ë –æ—á–∏—â–µ–Ω–æ. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ù–∞–ø–∏—à–∏ /start")
    return ConversationHandler.END

async def select_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text.lower()
    if "–ª–∏—á–Ω–æ—Å—Ç" in choice:
        mode = 'unpacking'
    elif "—Ü" in choice:
        mode = 'audience'
    elif "–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç" in choice:
        mode = 'competitors'
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECT

    context.user_data['mode'] = mode
    context.user_data['answers'] = []
    context.user_data['q_index'] = 0
    context.user_data['block_index'] = 0

    questions = get_questions(mode)
    await update.message.reply_text(f"üìù –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–Ω—ë–º!\n{questions[0]}")
    return QUESTION

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    save_answer(context.user_data, answer)

    questions = get_questions(context.user_data['mode'])
    q_index = context.user_data['q_index']

    if q_index < len(questions):
        await update.message.reply_text(questions[q_index])
        return QUESTION
    else:
        await update.message.reply_text("‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑‚Ä¶ üß†")
        prompt = get_full_prompt(context.user_data)

        # ‚úÖ –î–æ–±–∞–≤–∏–º —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        link_meta = parse_links_in_text("\n".join(context.user_data['answers']))
        if link_meta:
            prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ —Å—Å—ã–ª–∫–∞–º:\n{link_meta}"

        try:
            gpt_result = generate_response(prompt)
            if not gpt_result:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: GPT –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç.")
                return ConversationHandler.END

            if isinstance(gpt_result, list):
                blocks = gpt_result
            else:
                blocks = gpt_result.split("\n\n")

            context.user_data["gpt_blocks"] = blocks
            context.user_data["block_index"] = 0

            await update.message.reply_text("‚úÖ GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ üëá")
            await update.message.reply_text(blocks[0])
            return NEXT

        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return ConversationHandler.END

async def next_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["block_index"] += 1
    blocks = context.user_data["gpt_blocks"]
    i = context.user_data["block_index"]

    if i < len(blocks):
        await update.message.reply_text(blocks[i])
        return NEXT
    else:
        await update.message.reply_text("‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥–æ–π –∞–Ω–∞–ª–∏–∑ ‚Äî –Ω–∞–ø–∏—à–∏ /start")
        return ConversationHandler.END

def main():
    app = Application.builder().token(config["TELEGRAM_TOKEN"]).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_mode)],
            QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer)],
            NEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, next_block)],
        },
        fallbacks=[
            CommandHandler("reset", reset),
            CommandHandler("start", start),
        ],
        allow_reentry=True
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
